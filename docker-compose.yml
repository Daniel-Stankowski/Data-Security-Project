version: "3.9"
services:
  frontend-od:
    container_name: frontend-od
    build:
      context: frontend-od
      dockerfile: Dockerfile
    image: frontend-od:latest
    ports:
      - '3000:3000'
    networks:
      - network
    depends_on:
      - backend-od

  backend-od:
    container_name: backend-od
    build:
      context: backend-od
      dockerfile: Dockerfile
    image: backend-od:latest
    environment:
      - SPRING_PROFILES_ACTIVE=dev
    ports:
      - '8081:8081'
    networks:
      - network
    depends_on:
      db-od:
        condition: service_healthy
      keycloak-od:
        condition: service_healthy

  db-od:
    image: postgres:15.0-alpine
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=backend-od
    volumes:
      - db-od:/var/lib/postgresql/data
    networks:
      - network
    healthcheck:
      test: pg_isready -U postgres
      interval: 10s
      timeout: 5s
      retries: 5

  keycloak-od:
    container_name: keycloak-od
    image: danielstankowski/keycloak-od:1.0.Final
    ports:
      - '8080:8080'
    networks:
      - network
    depends_on:
      keycloak-db-od:
        condition: service_healthy
    healthcheck:
      test: "curl -f http://localhost:8080/admin || exit 1"

  keycloak-db-od:
    image: mysql:8.0.31
    container_name: keycloak-db-od
    environment:
      - MYSQL_DATABASE=keycloak-od
      - MYSQL_USER=keycloak
      - MYSQL_PASSWORD=password
      - MYSQL_ROOT_PASSWORD=root
    volumes:
      - keycloak-db-od:/var/lib/mysql
    networks:
      - network
    healthcheck:
      test: "mysqladmin ping -u root -p$${MYSQL_ROOT_PASSWORD}"

networks:
  network:
    driver: bridge

volumes:
  db-od:
    driver: local
  keycloak-db-od:
    driver: local